// Generated by CoffeeScript 1.6.2
(function() {
  var Sky, Star, canvas, center_x, center_y, change_sky, ctx, div, draw_sky, enterFullscreen, exitFullscreen, fps, height, i, inFullscreen, last_frame, max_radius, max_size, ms_per_frame, random_star, requestAnimationFrame, retinafy, set_canvas_origin, set_canvas_size, show_trails, sky, speed, star_number, stars, timeoutID, width, wrapper_id;

  wrapper_id = 'wrapper';

  width = document.documentElement.clientWidth;

  height = document.documentElement.clientHeight;

  star_number = Math.floor(0.001 * width * height);

  show_trails = false;

  speed = Math.PI / 100000;

  max_size = 2;

  fps = 30;

  Sky = (function() {
    function Sky(width, height, center_x, center_y, ctx) {
      var diff_x, diff_y;

      this.width = width;
      this.height = height;
      this.center_x = center_x;
      this.center_y = center_y;
      diff_x = Math.max(this.center_x, this.width - this.center_x);
      diff_y = Math.max(this.center_y, this.height - this.center_y);
      this.max_radius = Math.sqrt(diff_x * diff_x + diff_y * diff_y);
      this.update_boundary();
    }

    Sky.prototype.update_boundary = function() {
      this.x_upper = this.width - this.center_x;
      this.x_lower = -this.center_x;
      this.y_upper = this.height - this.center_y;
      return this.y_lower = -this.center_y;
    };

    Sky.prototype.visible = function(x, y) {
      return x >= this.x_lower && x <= this.x_upper && y >= this.y_lower && y <= this.y_upper;
    };

    Sky.prototype.clear = function(ctx) {
      ctx.fillStyle = 'black';
      return ctx.fillRect(this.x_lower, this.y_lower, this.width, this.height);
    };

    Sky.prototype.scale = function(new_width, new_height, stars) {
      var r_scale_factor, star, x_scale_factor, y_scale_factor, _i, _len, _results;

      x_scale_factor = new_width / this.width;
      y_scale_factor = new_height / this.height;
      r_scale_factor = (Math.sqrt(new_width * new_width + new_height * new_height)) / (Math.sqrt(this.width * this.width + this.height * this.height));
      this.width = new_width;
      this.height = new_height;
      this.center_x = this.center_x * x_scale_factor;
      this.center_y = this.center_y * y_scale_factor;
      this.update_boundary();
      _results = [];
      for (_i = 0, _len = stars.length; _i < _len; _i++) {
        star = stars[_i];
        _results.push(star.scale(r_scale_factor));
      }
      return _results;
    };

    return Sky;

  })();

  Star = (function() {
    function Star(init_angle, radius, size, speed, max_brightness, trail) {
      this.init_angle = init_angle;
      this.radius = radius;
      this.size = size;
      this.speed = speed;
      this.max_brightness = max_brightness;
      this.trail = trail;
      this.bright_offset = Math.random() * 2 * Math.PI;
    }

    Star.prototype.draw = function(ctx, sky, time_elapsed) {
      var angle, brightness, real_angle, x, y;

      angle = this.init_angle + (time_elapsed * this.speed) % (2 * Math.PI);
      x = this.radius * Math.cos(angle);
      y = -this.radius * Math.sin(angle);
      if (!sky.visible(x, y)) {
        return;
      }
      brightness = ((1 + Math.sin(0.001 * time_elapsed + this.bright_offset)) / 2 + 0.05) * this.max_brightness;
      ctx.save();
      ctx.fillStyle = ctx.strokeStyle = "rgba(255, 255, 255, " + brightness;
      ctx.translate(x, y);
      ctx.rotate(angle);
      this.drawCross(this.size);
      brightness = brightness * 0.75;
      ctx.fillStyle = ctx.strokeStyle = "rgba(255, 255, 255, " + brightness;
      ctx.rotate(0.25 * Math.PI);
      this.drawCross(this.size * 4 / 5);
      ctx.restore();
      if (!this.trail) {
        return;
      }
      real_angle = 2 * Math.PI - angle % (2 * Math.PI);
      ctx.strokeStyle = "rgba(255, 255, 255, " + (brightness * 2 / 3);
      ctx.beginPath();
      ctx.lineWidth = this.size;
      ctx.arc(0, 0, this.radius, real_angle, real_angle + Math.PI / 4, false);
      return ctx.stroke();
    };

    Star.prototype.scale = function(scale_factor) {
      return this.radius = this.radius * scale_factor;
    };

    Star.prototype.drawCross = function(size) {
      var inner_side, outer_side;

      ctx.beginPath();
      inner_side = size;
      outer_side = 2.5 * inner_side;
      ctx.moveTo(inner_side, 0);
      ctx.lineTo(outer_side, -outer_side);
      ctx.lineTo(0, -inner_side);
      ctx.lineTo(-outer_side, -outer_side);
      ctx.lineTo(-inner_side, 0);
      ctx.lineTo(-outer_side, outer_side);
      ctx.lineTo(0, inner_side);
      ctx.lineTo(outer_side, outer_side);
      return ctx.fill();
    };

    return Star;

  })();

  retinafy = function(canvas) {
    var DPR;

    DPR = window.devicePixelRatio;
    width = +canvas.getAttribute('width');
    height = +canvas.getAttribute('height');
    canvas.style.width = width + 'px';
    canvas.style.height = height + 'px';
    canvas.width = width * DPR;
    canvas.height = height * DPR;
    return canvas.getContext('2d').scale(DPR, DPR);
  };

  requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

  div = document.getElementById(wrapper_id);

  canvas = document.createElement('canvas');

  div.appendChild(canvas);

  set_canvas_size = function(width, height) {
    canvas.width = width;
    canvas.height = height;
    return retinafy(canvas);
  };

  set_canvas_size(width, height);

  ctx = canvas.getContext('2d');

  random_star = function(speed, max_radius, max_size, show_trail) {
    var init_angle, max_brightness, radius, size;

    init_angle = Math.random() * 2 * Math.PI;
    radius = Math.random() * max_radius;
    size = Math.random() * max_size;
    max_brightness = (Math.random() + 0.5) / 1.5;
    return new Star(init_angle, radius, size, speed, max_brightness, show_trail);
  };

  center_x = Math.random() * width;

  center_y = Math.random() * height;

  sky = new Sky(width, height, center_x, center_y, ctx);

  max_radius = sky.max_radius;

  stars = (function() {
    var _i, _results;

    _results = [];
    for (i = _i = 1; 1 <= star_number ? _i <= star_number : _i >= star_number; i = 1 <= star_number ? ++_i : --_i) {
      _results.push(random_star(speed, max_radius, max_size, show_trails));
    }
    return _results;
  })();

  set_canvas_origin = function() {
    ctx.restore();
    ctx.save();
    return ctx.translate(sky.center_x, sky.center_y);
  };

  set_canvas_origin();

  ms_per_frame = 1000 / fps;

  last_frame = 0;

  draw_sky = function(time_stamp) {
    var star, _i, _len;

    if (time_stamp - last_frame < ms_per_frame) {
      requestAnimationFrame(draw_sky);
      return;
    }
    last_frame = time_stamp;
    sky.clear(ctx);
    for (_i = 0, _len = stars.length; _i < _len; _i++) {
      star = stars[_i];
      star.draw(ctx, sky, time_stamp);
    }
    return requestAnimationFrame(draw_sky);
  };

  requestAnimationFrame(draw_sky);

  change_sky = function() {
    width = document.documentElement.clientWidth;
    height = document.documentElement.clientHeight;
    set_canvas_size(width, height);
    sky.scale(width, height, stars);
    return set_canvas_origin();
  };

  timeoutID = 0;

  window.addEventListener('resize', function() {
    if (timeoutID) {
      clearTimeout(timeoutID);
    }
    return timeoutID = setTimeout(change_sky, 50);
  });

  inFullscreen = function() {
    return document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
  };

  enterFullscreen = function(elem) {
    if (elem.requestFullscreen) {
      return elem.requestFullscreen();
    } else if (elem.mozRequestFullScreen) {
      return elem.mozRequestFullScreen();
    } else if (elem.webkitRequestFullscreen) {
      return elem.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
    } else if (elem.msRequestFullscreen) {
      return elem.msRequestFullscreen();
    }
  };

  exitFullscreen = function() {
    if (document.exitFullscreen) {
      return document.exitFullscreen();
    } else if (document.mozExitFullscreen) {
      return document.mozExitFullScreen();
    } else if (document.webkitExitFullScreen) {
      return document.webkitExitFullscreen();
    } else if (document.msExitFullscreen) {
      return document.msExitFullscreen();
    }
  };

  window.addEventListener('keypress', function(e) {
    var key;

    key = e.which || e.charCode;
    if (key === 102) {
      if (inFullscreen()) {
        return exitFullscreen();
      } else {
        return enterFullscreen(document.documentElement);
      }
    }
  });

}).call(this);
